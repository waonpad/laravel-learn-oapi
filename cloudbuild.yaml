substitutions:
  _SERVICE_NAME: 'my-service'
  _SERVICE_REGION: 'asia-northeast1'
  _SERVICE_PORT: '8000'
  _APP_KEY: 'base64:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx='
images:
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
# gcloud builds triggers create でトリガーを作成する際にサービスアカウントの指定が必須になっており、
# サービスアカウントを指定した場合はビルドログの保存先を指定する必要がある
# https://zenn.dev/link/comments/56536c4c04f42c
logsBucket: gs://${_GC_STORAGE_BUILD_LOG_BUCKET}
options:
  logging: GCS_ONLY
steps:
  # gcloud run deploy の --env-vars-file に渡すためのファイルを生成
  - name: 'bash'
    script: |
      sed -i "s/^APP_KEY=.*/APP_KEY=${_APP_KEY}/" .env.example.production
      sed -i "s/^GC_STORAGE_SQLITE_BUCKET=.*/GC_STORAGE_SQLITE_BUCKET=${_GC_STORAGE_SQLITE_BUCKET}/" .env.example.production
      cp .env.example.production .env.production
      ./env2yml-linux-amd64 .env.production
    automapSubstitutions: true
  # コンテナイメージをビルド
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '.'
      - '--build-arg'
      - 'APP_KEY=${_APP_KEY}'
  # コンテナイメージをレジストリにプッシュ
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
  # Cloud Run にデプロイ
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '--port'
      - '${_SERVICE_PORT}'
      - '--region'
      - '${_SERVICE_REGION}'
      - '--env-vars-file'
      - '.env.production.yml'
      # 誰でもアクセス可能にする
      - '--allow-unauthenticated'
      # SQLiteを使用する都合上、データの不整合を防ぐために最大インスタンス数を1にする
      - '--max-instances'
      - '1'
